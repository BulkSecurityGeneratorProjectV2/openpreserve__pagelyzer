#! /usr/bin/ruby1.9.1
#-*- mode: ruby; encoding: utf-8 -*-
# Andrés Sanoja
# UPMC - LIP6
#
#
#
# pagelyzer_capture
#
# Requires: Ruby 1.9.1+ (1.8.x versions won't work), rubygems 1.3.7+ and ImageMagick 6.6.0-4+
#
# Copyright (C) 2011, 2012 Andrés Sanoja, Université Pierre et Marie Curie -
# Laboratoire d'informatique de Paris 6 (LIP6)
#
# Contributors: Stephane Gançarski - LIP6
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# REMARKS:
# ImageMagick is not mandatory but it is used for processing thumbnails of webshots
# this thumbns area usefull for integrating with other tools and for future optimization
# of change detection process ignoring parameter --thumb should do the trick
#

require 'selenium-webdriver'
#require 'selenium/client'
require 'base64'
require 'uri'
require 'fileutils'

def save_image(filename,content)
	f = open(filename,'wb')
	f.write(Base64.decode64(content))
	f.close
end

def usage
	puts "USAGE: pagelyzer_capture --url=URL [--js_files_url=BASE_URL] [--output-folder=FOLDER] [--browser=BROWSER_CODE] [--thumbnail] [--help]"
end

def help
	usage
	puts "This tool aims to have a HTML document with the visual cues integrated, called Decorated HTML. This allows to save the state of a browser at the moment of capture"
	puts "Browsers code are the same as defined in selenium. For instance:"
	puts " - firefox"
	puts " - chrome"
	puts " - iexploreproxy"
	puts " - safariproxy"
	puts " - opera"
	puts ""
	puts "Note: the browser should be installed in your machine to work with selenium webdriver"
 	puts ""
	puts "The output is sent to 'out' folder. If it doesn't exists it will be created"
	
end

def config(key)
	conf = File.open('etc/pagelyzer.conf','r')
	value = ""
	conf.each_line do |line|
		pair = line.split(":")
		if pair[0].strip == key
			value = pair[1].strip
			break
		end
	end
	return value
end

def verify_data_folder(path)
	state = true
	state = File.exists? path+"/js/decorate_mini.js"
	state
end

def remove_slash(path)
	path.sub(/(\/)+$/,'')
end

if ARGV==[]
usage
exit 
end

current_folder = File.expand_path(File.dirname(File.dirname(__FILE__)))
url = ""
browser = "firefox"
output_folder = "#{current_folder}/out"
js_files_url = "http://www-ia.lip6.fr/~sanojaa/SCAPE"
remote = false
thumb = false

#~ Not needed in a standalone configuration
#~ data_folder = config('data-folder') #get the data folder usually /usr/share/pagelyzer-ruby
#~ data_folder = remove_slash(data_folder)
#~ unless verify_data_folder(data_folder)
	#~ puts "ERROR: necessary files are not found in #{data_folder}. Please edit /etc/pagelyzer.conf file and point it to the folder where data files are"
	#~ exit
#~ end

unless File.exists? output_folder
	FileUtils.mkdir_p output_folder
end

ARGV.each do |op|
	sop = op.strip.split("=")
	url 			= sop[1] if sop[0] == "--url"
	browser 		= sop[1] if sop[0] == "--browser"
	output_folder 	= sop[1] if sop[0] == "--output-folder"
	js_files_url 	= sop[1] if sop[0] == "--js-files-url"
	thumb = true 	if sop[0] == "--thumbnail"
	
	if op[0..6] == "--help"
		help
		exit
	end
	if op[0..9] == "--version"
		puts "SCAPE WebPage Capture. Version 0.9"
		puts "UPMC - LIP6"
		exit
	end
end

if browser.nil? or browser.strip == "" 
	puts "ERROR: browser not specified"
	exit
end

if url.nil? or url.strip  == ""
	puts "ERROR: url not given"
	exit
end

host = "#{URI.parse(url).scheme}://#{URI.parse(url).host}:#{URI.parse(url).port}"
path = URI.parse(url).path

if remote
	remote_browsers = [browser] 
else
	local_browsers = [browser]
end

# this is no longer needed
#~ if js_files_url.nil? or js_files_url.strip==""
	#~ puts "ERROR: parameter --js-files-url not included. Sorry, can't continue"
	#~ exit
#~ end

#~ unless File.exist?('out')
	#~ FileUtils.mkdir 'out'
#~ end

dump = File.open("#{current_folder}/data/js/decorate_mini.js").read

load_dump = <<FIN
function func_dump() {
	var script = document.createElement('script');
	script.type = "text/javascript"
	script.appendChild(document.createTextNode("#{dump}"));
	document.getElementsByTagName('head')[0].appendChild(script);
}

var callback = arguments[arguments.length - 1];
callback(func_dump());
FIN

local_browsers.each do |browser|
	puts "Capturing #{url} with local #{browser}"
	begin
		driver = Selenium::WebDriver.for browser.to_sym
	rescue
		puts "Connection not possible with #{browser.to_sym}"
		puts "WARNING: Is #{browser} installed in your system?"
		puts "Try with the --browser=your_installed_browser"
		help
		next
	end
	driver.manage.timeouts.implicit_wait = 20
	driver.navigate.to host+path
	src =""
	status="OK"
	driver.manage.window.resize_to(970,728)
	filename = url.gsub('http://','').gsub('/','_').gsub('.','_')
	File.open("#{output_folder}/#{browser}_#{filename}_original.html",'w') {|f| f.write driver.page_source}
	driver.save_screenshot("#{output_folder}/#{browser}_#{filename}.png")
	if thumb
		begin
			system("cp \"#{output_folder}/#{browser}_#{filename}.png\" \"#{output_folder}/#{browser}_#{filename}_thumb.png\"")
			p1 = system("convert \"#{output_folder}/#{browser}_#{filename}_thumb.png\" -crop 1024x768+0+0 \"#{output_folder}/#{browser}_#{filename}_thumb.png\"")
			p2 = system("convert \"#{output_folder}/#{browser}_#{filename}_thumb.png\" -filter Lanczos 300x225 \"#{output_folder}/#{browser}_#{filename}_thumb.png\"")
			if p1 and p2
				puts "Thumbnail problem. Is ImageMagick 6+ installed in your system?"
			end
		rescue Exception=>e
			puts "ImageMagick error. Thumbnail not generated present?"
			puts e.backtrace
		end
	end
	#converting image from RGBA to RGB
	#marcalizer complains on RGBA format
	system "convert \"#{output_folder}/#{browser}_#{filename}.png\" -flatten +matte \"#{output_folder}/#{browser}_#{filename}.png\""
	begin
		driver.execute_async_script(load_dump)
		#sleep 120000
		loaded = false
		k=0
		while !loaded and k<10
			begin
				r = driver.execute_script("return dump_loaded!=undefined;")
				loaded = (r==true);
				puts "Waiting page to finish loading... (Timeout in #{10-k}sec)"
				sleep(0.5)
			 rescue
				 puts "Something maybe is wrong, but still waiting page to finish loading... (Timeout in #{10-k}sec)"
				 sleep(2)
			 end
			k+=1
		end
		src = driver.execute_script("return dump_start();")
	rescue Exception=>e
		puts "#{browser} failed!"
		puts "The JavaScript could not be injected into page"
		status="FAIL"
		#puts e.backtrace
		driver.close
		next
	end
	
	File.open("#{output_folder}/#{browser}_#{filename}_decorated.html",'w') {|f| f.write src}
	driver.close
	begin
		driver.quit
		puts "Browser closed"
	rescue
		puts "Browser rest open"
	end
	puts "done."
end
